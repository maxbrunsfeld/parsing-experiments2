#!/usr/bin/env bash

usage() {
  cat <<EOF
USAGE

  $0 [--help] [--debug] [--docker]

SUMMARY

  Compile the Tree-sitter WASM library. This will create two files in the
  \`lib/binding_web\` directory: \`tree-sitter.js\` and \`tree-sitter.wasm\`.

REQUIREMENTS

  You must have either the \`emcc\` command or the \`docker\` command
  on your PATH for this to work.

OPTIONS

  --help:   Display this message.
  --debug:  Compile the library more quickly, with fewer optimizations
            and more runtime assertions.
  --docker: Run emscripten using docker, even if \`emcc\` is installed.
            By default, \`emcc\` will be run directly when available.

EOF
}

set -e

web_dir=lib/binding_web
exports=$(cat ${web_dir}/exports.json | tr -d '\n')
emscripten_flags="-O3"
minify_js=1
force_docker=0

while [[ $# > 0 ]]; do
  case "$1" in
    --debug)
      minify_js=0
      emscripten_flags="-s ASSERTIONS=1 -s SAFE_HEAP=1 -O0"
      ;;

    --help)
      usage
      exit 0
      ;;

    --docker)
      force_docker=1
      ;;

    *)
      usage
      echo "Unrecognized argument '$1'"
      exit 1
      ;;
  esac
  shift
done

if which emcc > /dev/null && [[ "$force_docker" == "0" ]]; then
  export EMCC_FORCE_STDLIBS=libc++
elif which docker > /dev/null; then
  docker build                                 \
    -t emscripten-meson                        \
    -f script/util/emscripten-meson-dockerfile \
    .
  docker run         \
    --rm             \
    -v $(pwd):/src:Z \
    -u $(id -u)      \
    emscripten-meson \
    script/build-wasm
  exit 0
else
  echo 'You must have either `docker` or `emcc` on your PATH to run this script'
  exit 1
fi

mkdir -p target/scratch

# Use emscripten to generate `tree-sitter.js` and `tree-sitter.wasm`
# in the `target/scratch` directory

emcc_c_args="-s WASM=1               \
  $emscripten_flags                  \
  -D 'fprintf(...)='                 \
  -D NDEBUG="

emcc_js_args="-s TOTAL_MEMORY=33554432 \
  -s ALLOW_MEMORY_GROWTH=1             \
  -s NO_FILESYSTEM=1"

meson target/scratch                            \
  --buildtype=release                           \
  -Ddefault_library=static                      \
  --cross-file script/util/meson_wasm_cross.txt \
  -Dc_args="${emcc_c_args} ${emcc_js_args}"

meson configure target/scratch -Dlib_binding=web
ninja -C target/scratch

emcc                                   \
  -s MAIN_MODULE=2                     \
  -s EXPORTED_FUNCTIONS="${exports}"   \
  ${emcc_js_args}                      \
  --js-library ${web_dir}/imports.js   \
  --pre-js ${web_dir}/prefix.js        \
  --post-js ${web_dir}/binding.js      \
  target/scratch/lib/libtree-sitter.a  \
  -o target/scratch/lib/tree-sitter.js

# Use terser to write a minified version of `tree-sitter.js` into
# the `lib/binding_web` directory.
if [[ "$minify_js" == "1" ]]; then
  if [ ! -d ${web_dir}/node_modules/terser ]; then
    (
      cd ${web_dir}
      npm install
    )
  fi
  ${web_dir}/node_modules/.bin/terser    \
    --compress                           \
    --mangle                             \
    --keep-classnames                    \
    -- target/scratch/lib/tree-sitter.js \
    > $web_dir/tree-sitter.js
else
  cp target/scratch/lib/tree-sitter.js $web_dir/tree-sitter.js
fi

mv target/scratch/lib/tree-sitter.wasm $web_dir/tree-sitter.wasm
